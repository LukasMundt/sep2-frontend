/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/rest/api/games/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all available games.
         * @description Get all available games.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns all available games. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GameDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/api/games/{gameSlug}/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available categories by game.
         * @description Get available categories by game.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    gameSlug: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns all available categories for the given game. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Category"][];
                    };
                };
                /** @description Returned if the game were not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/api/games/{gameSlug}/{categoryId}/leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get leaderboard by game and category.
         * @description Get leaderboard by game and category.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description the game of the leaderboard */
                    gameSlug: string;
                    /** @description the category of the leaderboard */
                    categoryId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns a list of runs that are representing the leaderboard. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RunDto"][];
                    };
                };
                /** @description Returned if the game or category were not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/api/reviews/unreviewed/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all unreviewed runs.
         * @description Get a list of all unreviewed runs. Only users with admin rights are allowed to get all unreviewed runs.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns a list of all unreviewed runs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RunReview"][];
                    };
                };
                /** @description Returned if the caller is not authenticated. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/api/reviews/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verifies a unreviewed run.
         * @description Verifies a unreviewed run. Only users with admin rights are allowed to verify a run.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": string;
                };
            };
            responses: {
                /** @description Returned if the run is successfully verified. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Returned if the caller is not authenticated. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Returned if the uuid is not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * user login info
         * @description Returns information about the currently authenticated user's token.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returned if the caller is authenticated. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Returned if the caller is not authenticated. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * user login
         * @description Creates a new token for a user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Credentials"];
                };
            };
            responses: {
                /** @description Returns information about the caller's token if the caller is authenticated. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenResponse"];
                    };
                };
                /** @description Returned if the login fails due to invalid credentials. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * user logout
         * @description Logs the current user out, destroying the existing token, if any.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returned if the user was successfully logged out. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Returned if the caller is not authenticated. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RunDto: {
            /** @description Username of the speedrunner's account. */
            speedrunner: string;
            /** Format: date-time */
            date: string;
            runtime: components["schemas"]["Runtime"];
        };
        GameDto: {
            /** @example minecraft */
            name: string;
            slug: string;
            imageUrl: string;
        };
        RunReview: {
            gameName?: string;
            categoryLabel?: string;
            uuid?: string;
            run?: components["schemas"]["RunDto"];
        };
        Category: {
            /** @example ANY_PERCENT */
            id?: string;
            /** @example Any % */
            label?: string;
        };
        Runtime: {
            hours: number;
            minutes: number;
            seconds: number;
            milliseconds: number;
        };
        TokenResponse: {
            access_token?: string;
            /** @example Bearer */
            token_type?: string;
            /** @example 3600 */
            expires_in?: number;
        };
        Credentials: {
            username: string;
            password: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
